{"ast":null,"code":"var _jsxFileName = \"/Users/borislav26/GolandProjects/planted/frontend/src/component/Diagram.js\",\n  _s = $RefreshSig$();\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport VennModule from \"highcharts/modules/venn.js\";\nimport { useEffect, useState } from 'react';\nimport { fetcAllUsersWithNumberOfElements, fetchOverlapBetweenGroups, fetchTotalOverlap } from '../logic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nVennModule(Highcharts);\nconst Diagram = () => {\n  _s();\n  let vennOptions = {\n    title: {},\n    chart: {\n      backgroundColor: \"#ffd500\",\n      borderWidth: 2,\n      borderColor: \"#fff\",\n      borderRadius: 20,\n      className: \"\",\n      animation: false\n    },\n    series: [{\n      type: 'venn',\n      name: 'Overlap Between Groups',\n      data: []\n    }]\n  };\n  const [vennOptionsState, setVennOptionsState] = useState({});\n  const fetchData = async () => {\n    const data = await fetchOverlapBetweenGroups();\n    return data;\n  };\n  const fetchTotalOverlapsData = async () => {\n    const data = await fetchTotalOverlap();\n    return data;\n  };\n  const fetchUserTypes = async () => {\n    const data = await fetcAllUsersWithNumberOfElements();\n    return data;\n  };\n  const setDiagramData = async () => {\n    const overlapBetweenGroupsData = await fetchData();\n    const totalOverlapData = await fetchTotalOverlapsData();\n    const allUserTypes = await fetchUserTypes();\n    vennOptions.series[0].data = [...vennOptions.series[0].data, ...allUserTypes.map(el => ({\n      sets: [el.name],\n      value: el.numberOfElements,\n      name: el.name\n    }))];\n    let allGroups = [];\n    overlapBetweenGroupsData.forEach(elem => {\n      const groups = elem.name.split(\"->\");\n      allGroups = [...allGroups, {\n        name: groups[0],\n        elementsNumber: elem.firstItemElements.length\n      }, {\n        name: groups[1],\n        elementsNumber: elem.secondItemElements.length\n      }];\n      vennOptions.series[0].data = [...vennOptions.series[0].data, {\n        sets: groups,\n        value: elem.numberOfUsers,\n        name: elem.name\n      }];\n    });\n    vennOptions.series[0].data = [...vennOptions.series[0].data, {\n      sets: [...new Set(allGroups.map(el => el.name))],\n      value: totalOverlapData.totalOverlap.length,\n      name: 'Total Overlap'\n    }];\n    vennOptions.series[0].data = [...vennOptions.series[0].data, {\n      sets: [...new Set(allGroups.map(el => el.name))],\n      value: totalOverlapData.totalOverlap.length,\n      name: 'Total Overlap'\n    }];\n    vennOptions.title.text = `Total Overlap Between Groups is ${totalOverlapData.overlapPercentage}%`;\n    console.log(vennOptions);\n    setVennOptionsState(vennOptions);\n  };\n  useEffect(() => {\n    setDiagramData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(HighchartsReact, {\n    highcharts: Highcharts,\n    options: vennOptionsState\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(Diagram, \"l8p8H3JDazcknOVUyrx7I8hpwXY=\");\n_c = Diagram;\nexport default Diagram;\nvar _c;\n$RefreshReg$(_c, \"Diagram\");","map":{"version":3,"names":["HighchartsReact","Highcharts","VennModule","useEffect","useState","fetcAllUsersWithNumberOfElements","fetchOverlapBetweenGroups","fetchTotalOverlap","Diagram","vennOptions","title","chart","backgroundColor","borderWidth","borderColor","borderRadius","className","animation","series","type","name","data","vennOptionsState","setVennOptionsState","fetchData","fetchTotalOverlapsData","fetchUserTypes","setDiagramData","overlapBetweenGroupsData","totalOverlapData","allUserTypes","map","el","sets","value","numberOfElements","allGroups","forEach","elem","groups","split","elementsNumber","firstItemElements","length","secondItemElements","numberOfUsers","Set","totalOverlap","text","overlapPercentage","console","log"],"sources":["/Users/borislav26/GolandProjects/planted/frontend/src/component/Diagram.js"],"sourcesContent":["import HighchartsReact from 'highcharts-react-official'\nimport Highcharts from 'highcharts'\nimport VennModule from \"highcharts/modules/venn.js\"\nimport {useEffect, useState} from 'react'\nimport {fetcAllUsersWithNumberOfElements, fetchOverlapBetweenGroups, fetchTotalOverlap} from '../logic'\nVennModule(Highcharts)\n\nconst Diagram = () => {\n    let vennOptions = {\n        title: {},\n        chart: {\n            backgroundColor: \"#ffd500\",\n            borderWidth: 2,\n            borderColor: \"#fff\",\n            borderRadius: 20,\n            className : \"\",\n            animation: false,\n        },\n        series: [\n            {\n            type: 'venn',\n            name: 'Overlap Between Groups',\n            data: []\n        }]\n    }\n\n    const [vennOptionsState, setVennOptionsState] = useState({})\n\n    const fetchData = async () => {\n        const data = await fetchOverlapBetweenGroups()\n        return data\n    }\n\n    const fetchTotalOverlapsData = async () => {\n        const data = await fetchTotalOverlap()\n        return data\n    }\n\n    const fetchUserTypes = async () => {\n        const data = await fetcAllUsersWithNumberOfElements()\n        return data\n    }\n\n    const setDiagramData = async () => {\n        const overlapBetweenGroupsData = await fetchData()\n        const totalOverlapData = await fetchTotalOverlapsData()\n        const allUserTypes = await fetchUserTypes()\n\n        vennOptions.series[0].data = [...vennOptions.series[0].data,\n            ...allUserTypes.map(el => ({sets: [el.name], value: el.numberOfElements, name: el.name}))\n        ]\n\n        let allGroups = []\n\n        overlapBetweenGroupsData.forEach((elem) => {\n            const groups = elem.name.split(\"->\")\n            allGroups = [\n                ...allGroups,\n                {name: groups[0], elementsNumber: elem.firstItemElements.length},\n                {name: groups[1], elementsNumber: elem.secondItemElements.length},\n            ]\n            vennOptions.series[0].data = [...vennOptions.series[0].data, {sets: groups, value: elem.numberOfUsers, name: elem.name}]\n        })\n\n        vennOptions.series[0].data = [...vennOptions.series[0].data, {\n            sets: [...new Set(allGroups.map(el => el.name))], value: totalOverlapData.totalOverlap.length, name: 'Total Overlap'}\n        ]\n\n        vennOptions.series[0].data = [...vennOptions.series[0].data, {\n            sets: [...new Set(allGroups.map(el => el.name))], value: totalOverlapData.totalOverlap.length, name: 'Total Overlap'}\n        ]\n\n        vennOptions.title.text = `Total Overlap Between Groups is ${totalOverlapData.overlapPercentage}%`\n\n        console.log(vennOptions)\n\n        setVennOptionsState(vennOptions)\n\n    }\n\n    useEffect(() => {\n        setDiagramData()\n    }, [])\n\n\n\n\n\n    return (\n        <HighchartsReact\n            highcharts={Highcharts}\n            options={vennOptionsState}\n        />\n    )\n}\n\nexport default Diagram"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}